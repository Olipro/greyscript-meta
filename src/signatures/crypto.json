{
    "aircrack": {
        "arguments": [{
            "label": "path",
            "type": "string"
        }],
        "description": "Cracks a router's WiFi password. Requires the path to a pcap file created by the aireplay command. Returns the target router's WiFi password (`string`) or `null` on failure (the terminal will also output an error).",
        "returns": ["null", "string"]
    },
    "airmon": {
        "arguments": [{
            "label": "option",
            "type": "string"
        }, {
            "label": "interface",
            "type": "string"
        }],
        "example": [
            "crypto = include_lib(\"/lib/crypto.so\")",
            "crypto.airmon(\"start\", \"eth0\")"
        ],
        "description": "Enables/Disables WiFi monitoring. Requires an option (`string`: either \"`start`\" or \"`stop`\") and network interface (e.g. \"`eth0`\").",
        "returns": ["number", "string"]
    },
    "aireplay": {
        "arguments": [{
            "label": "bssid",
            "type": "string"
        }, {
            "label": "essid",
            "type": "string"
        }, {
            "label": "maxAcks",
            "type": "string",
            "opt": true
        }],
        "description": "Capture packets from a wireless interface. Requires bssid (`string`) and essid (`string`), and an optional maxAcks (`number`). If maxAcks is not provided, use `Ctrl+C` to stop the capturing and save data to a file `file.cap` in the current directory. If maxAcks is provided, the command will stop automatically once the number of ACKs received exceeds maxAcks, saving the `file.cap` as described above. Returns `null`, or a `string` containing an error message.",
        "returns": ["null", "string"]
    },
    "decipher": {
        "arguments": [{
            "label": "encPass",
            "type": "string"
        }],
        "description": "Attempts to decipher an encrypted password. Takes a username (`string`) and encrypted password (hash `string`). Returns either the deciphered password (`string`), or `null` on failure.",
        "returns": ["null", "string"]
    },
    "smtp_user_List": {
        "arguments": [{
            "label": "ip",
            "type": "string"
        }, {
            "label": "port",
            "type": "number"
        }],
        "example": [
            "crypto = include_lib(\"/lib/crypto.so\")",
            "mail = crypto.smtp_user_list(\"88.231.19.24\", 25)",
            "print(mail)"
        ],
        "description": "Connects to a mail service and returns a list object of all users on the machine, along with their email address on the server (or otherwise an `email not found` string). Takes an IP address and port (`int`).",
        "returns": ["list:string", "string"]
    }
}